{"version":3,"sources":["constants/constants.jsx","components/map/google.map.jsx","components/header/header.jsx","services/http.serivce.jsx","services/marker.service.jsx","components/marker/marker.jsx","services/geocode.service.jsx","components/marker-container/marker-container.jsx","App.js","serviceWorker.js","index.js"],"names":["Constants","GEO_API_KEY","GoogleMap","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","lib_default","bootstrapURLKeys","key","defaultCenter","lat","lng","defaultZoom","markers","map","mark","index","Component","Header","alt","src","http_serivce","HttpService","baseUrl","url","axios","get","concat","data","put","delete","post","marker_service","MarkerService","isLocal","basePath","_this","Promise","resolve","reject","setTimeout","getFromLocal","getData","marker","push","setInLocal","postData","filter","t","address","localStorage","getItem","JSON","parse","setItem","stringify","Marker","state","isEdit","loading","setState","_this2","deleteMarker","then","err","Card","Spinner","CardHeader","InputGroup","Input","onChange","addressChange","bind","InputGroupAddon","addonType","Button","onClick","save","CardBody","disabled","enableEdit","outline","color","size","geocode_service","GeocodeService","geoApi","results","geometry","location","formatted_address","partialMatch","partial_match","catch","e","MarkerContainer","searching","error","dropdownOpen","preventDefault","getGeocode","resp","console","log","length","addToMarkerList","target","value","_this3","find","MerkerService","saveMarker","addNewMarker","_this4","onSubmit","findAddress","placeholder","toggle","data-toggle","add","selectAddress","Fade","in","tag","components_marker_marker","assign","App","getMarkers","toConsumableArray","header_header","map_google_map","marker_container_marker_container","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0NAAaA,EAAY,CACrBC,YAAa,2CCoCFC,cA5BX,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACVH,uHAON,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,iBAAkB,CAACC,IAAKhB,EAAUC,aAClCgB,cAAe,CACXC,IAAK,KACLC,IAAK,OAETC,YAAa,GAETd,KAAKH,MAAMkB,QAAQC,IAAI,SAACC,EAAMC,GAAP,OACnBd,EAAAC,EAAAC,cAAA,OAAKM,IAAKK,EAAKL,IAAKC,IAAKI,EAAKJ,IAAKN,UAAU,SAASG,IAAKQ,GAAQ,eApBvEC,aCQTC,0LAXP,OACIhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOc,IAAI,UACrBC,IAAI,mIANRH,+GCqBLI,EAAA,eArBZ,SAAAC,IAAe1B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,GACXxB,KAAKyB,QAAU,2DAGXC,GACJ,OAAOC,IAAMC,IAAN,GAAAC,OAAaH,uCAGbA,EAAKI,GACZ,OAAOH,IAAMI,IAAN,GAAAF,OAAaH,GAAOI,sCAGpBJ,GACP,OAAOC,IAAMK,OAAN,GAAAH,OAAgBH,qCAGlBA,EAAKI,GACV,OAAOH,IAAMM,KAAN,GAAAJ,OAAc7B,KAAKyB,SAAnBI,OAA6BH,GAAOI,aC0CnCI,EAAA,eA3DZ,SAAAC,IAAerC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,GACXnC,KAAKoC,SAAU,EACfpC,KAAKqC,SAAW,wEAGP,IAAAC,EAAAtC,KACT,OAAIA,KAAKoC,QACE,IAAIG,QAAQ,SAACC,EAASC,GACzBC,WAAW,WACPF,EAAQF,EAAKK,iBACd,OAGJnB,EAAYoB,QAAQ5C,KAAKqC,6CAGzBQ,GACP,GAAI7C,KAAKoC,QAAS,CACd,IAAMrB,EAAUf,KAAK2C,eAGrB,OAFA5B,EAAQ+B,KAAKD,GACb7C,KAAK+C,WAAWhC,GACT,IAAIwB,QAAQ,SAACC,EAASC,GACzBC,WAAW,WACPF,EAAQK,IACT,QAGX,OAAOrB,EAAYwB,SAAShD,KAAKqC,SAAUQ,8EAOlCA,GACT,GAAI7C,KAAKoC,QAAS,CACd,IAAMrB,EAAUf,KAAK2C,eAErB,OADA3C,KAAK+C,WAAWhC,EAAQkC,OAAO,SAAAC,GAAC,OAAIA,EAAEC,UAAYN,EAAOM,WAClD,IAAIZ,QAAQ,SAACC,EAASC,GACzBC,WAAW,WACPF,EAAQK,IACT,OAGX,OAAOrB,EAAYwB,SAAShD,KAAKqC,SAAUQ,0CAI3C,OAAKO,aAAaC,QAAQ,WAGnBC,KAAKC,MAAMH,aAAaC,QAAQ,YAF5B,sCAKJtC,GACPqC,aAAaI,QAAQ,UAAWF,KAAKG,UAAU1C,cC4BxC2C,cAxEX,SAAAA,EAAY7D,GAAO,IAAAyC,EAAA,OAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,IACfpB,EAAAxC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4D,GAAAvD,KAAAH,KAAMH,KACD8D,MAAQ,CACTC,QAAQ,EACRC,SAAS,GAJEvB,+GAaftC,KAAK8D,SAAS,CAACF,QAAQ,yCAIvB5D,KAAK8D,SAAS,CAACF,QAAQ,2CAGZ,IAAAG,EAAA/D,KACXA,KAAK8D,SAAS,CAACD,SAAS,IACxB1B,EAAc6B,aAAahE,KAAKH,MAAMgD,QAAQoB,KAAK,SAAAnC,GAC/CiC,EAAKlE,MAAMmE,aAAaD,EAAKlE,MAAMgD,QACnCkB,EAAKD,SAAS,CAACD,SAAS,KACzB,SAAAK,GACCH,EAAKD,SAAS,CAACD,SAAS,uCAK5B,OACIzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAM5D,UAAU,qBAERP,KAAK2D,MAAME,QACPzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,OAC/B,GAEVhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,KAEQrE,KAAK2D,MAAMC,OACPxD,EAAAC,EAAAC,cAACgE,EAAA,EAAD,KACIlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAOC,SAAUxE,KAAKyE,cAAcC,KAAK1E,QACzCI,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAiBC,UAAU,UACvBxE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAQC,QAAS9E,KAAK+E,KAAKL,KAAK1E,OAAhC,UAGRA,KAAKH,MAAMgD,OAAOM,SAI9B/C,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAUzE,UAAU,aAChBH,EAAAC,EAAAC,cAAA,2BADJ,IAC8BF,EAAAC,EAAAC,cAAA,aAAQN,KAAKH,MAAMgD,OAAOjC,KACpDR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BAHJ,IAG+BF,EAAAC,EAAAC,cAAA,aAAQN,KAAKH,MAAMgD,OAAOhC,KAErDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAQI,SAAUjF,KAAK2D,MAAMC,OAAQrD,UAAU,GAAGuE,QAAS9E,KAAKkF,WAAWR,KAAK1E,MACxEmF,SAAO,EAACC,MAAM,YACdC,KAAK,MAFb,QAGAjF,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAQI,SAAUjF,KAAK2D,MAAMC,OAAQkB,QAAS9E,KAAKgE,aAAaU,KAAK1E,MAAOO,UAAU,OAC9E4E,SAAO,EAACC,MAAM,YACdC,KAAK,MAFb,qBA/DPlE,aCaLmE,EAAA,eArBZ,SAAAC,IAAezF,OAAAC,EAAA,EAAAD,CAAAE,KAAAuF,GACXvF,KAAKwF,OAAL,yDAAA3D,OAAuEnC,EAAUC,oEAG1EwD,GACP,IAAMzB,EAAG,GAAAG,OAAM7B,KAAKwF,OAAX,aAAA3D,OAA6BsB,GACtC,OAAO3B,EAAYoB,QAAQlB,GAAKuC,KAAK,SAAAnC,GACjC,OAAOA,EAAKA,KAAK2D,QAAQzE,IAAI,SAAAkC,GACzB,MAAO,CACHtC,IAAKsC,EAAEwC,SAASC,SAAS/E,IACzBC,IAAKqC,EAAEwC,SAASC,SAAS9E,IACzBsC,QAASD,EAAE0C,kBACXC,aAAc3C,EAAE4C,gBAAiB,OAG1CC,MAAM,SAAAC,GACL,MAAMA,sBCsHHC,cA3HX,SAAAA,EAAYpG,GAAO,IAAAyC,EAAA,OAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiG,IACf3D,EAAAxC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmG,GAAA9F,KAAAH,KAAMH,KAED8D,MAAQ,CACTR,QAAS,GACT+C,WAAW,EACXT,QAAS,GACTU,MAAO,GACPC,cAAc,GARH9D,2EAYP0D,GAAG,IAAAjC,EAAA/D,KACXgG,EAAEK,iBACFrG,KAAK8D,SAAS,CAACoC,WAAW,EAAMC,MAAO,KACvCZ,EAAee,WAAWtG,KAAK2D,MAAMR,SAASc,KAAK,SAAAsC,GAG3C,OAFAC,QAAQC,IAAIF,GAEJA,EAAKG,QACT,KAAK,EACD3C,EAAKD,SAAS,CAACqC,MAAO,mBAAoBD,WAAW,IACrD,MACJ,KAAK,EACDnC,EAAK4C,gBAAgBJ,EAAK,IAC1B,MACJ,QACIxC,EAAKD,SAAS,CAAC2B,QAASc,EAAML,WAAW,MAGrD,SAAAC,GACIpC,EAAKD,SAAS,CAACqC,MAAO,wBAAyBD,WAAW,4CAIxDF,GACVhG,KAAK8D,SAAS,CAACX,QAAS6C,EAAEY,OAAOC,MAAOV,MAAO,2CAGrChD,GACVnD,KAAK2G,gBAAgBxD,2CAGTN,GAAQ,IAAAiE,EAAA9G,KACpBA,KAAK8D,SAAS,CAACqC,MAAO,KACRnG,KAAKH,MAAMkB,QAAQgG,KAAK,SAAA9F,GAAI,OAAI4B,EAAOM,UAAYlC,EAAKkC,UAElEnD,KAAK8D,SAAS,CAACqC,MAAO,+BAAgCD,WAAW,IAEjEc,EAAcC,WAAWpE,GAAQoB,KAAK,SAAAnC,GAClCgF,EAAKjH,MAAMqH,aAAarE,GACxBiE,EAAKhD,SAAS,CAAC2B,QAAS,GAAItC,QAAS,GAAI+C,WAAW,KACrD,SAAAhC,GACC4C,EAAKhD,SAAS,CAACqC,MAAO,mHAUzB,IAAAgB,EAAAnH,KACL,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,QAAM8G,SAAUpH,KAAKqH,YAAY3C,KAAK1E,OAClCI,EAAAC,EAAAC,cAACgE,EAAA,EAAD,KAEIlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAOC,SAAUxE,KAAKyE,cAAcC,KAAK1E,MAClCsH,YAAY,gBACZT,MAAO7G,KAAK2D,MAAMR,QAClB2B,QAAS9E,KAAKuH,OAAQC,cAAY,aAEzCpH,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAiBC,UAAU,UACvBxE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CACQI,SAAUjF,KAAK2D,MAAMuC,YAAclG,KAAK2D,MAAMR,QAC9CiC,MAAM,WACTpF,KAAK2D,MAAMuC,UAAY,eAAiB,kBAQrDlG,KAAK2D,MAAM8B,QAAQiB,OAAS,EACxBtG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,gDACAH,EAAAC,EAAAC,cAAA,UAEQN,KAAK2D,MAAM8B,QAAQzE,IAAI,SAAAyG,GAAG,OACtBrH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MACVuE,QAASqC,EAAKO,cAAchD,KAAKyC,EAAMM,IAAOA,EAAItE,aAKpE,GAIV/C,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CAAMC,KAAM5H,KAAK2D,MAAMwC,MAAO0B,IAAI,QAAQtH,UAAU,OAC/CP,KAAK2D,MAAMwC,QAGpB/F,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,gBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVP,KAAKH,MAAMgE,QAAUzD,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAS7D,UAAU,SAAW,IAExDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEPP,KAAKH,MAAMkB,QAAQC,IAAI,SAAC6B,EAAQ3B,GAAT,OACnBd,EAAAC,EAAAC,cAACwH,EAADhI,OAAAiI,OAAA,GAAYZ,EAAKtH,MAAjB,CAAwBa,IAAKQ,EAAO2B,OAAQA,gBApH1C1B,aC4Cf6G,cAjDX,SAAAA,EAAYnI,GAAO,IAAAyC,EAAA,OAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgI,IACf1F,EAAAxC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkI,GAAA7H,KAAAH,KAAMH,KACD8D,MAAQ,CACT5C,QAAS,GACT8C,SAAS,GAJEvB,mFAQC,IAAAyB,EAAA/D,KAChBmC,EAAc8F,aAAahE,KAAK,SAAAnC,GAC5B0E,QAAQC,IAAI,eAAgB3E,GAC5BiC,EAAKD,SAAS,CAAC/C,QAASe,EAAM+B,SAAS,KACxC,SAAAK,GACCH,EAAKD,SAAS,CAACD,SAAS,2CAInBhB,GACT2D,QAAQC,IAAI5D,GACZ7C,KAAK8D,SAAS,CAAC/C,QAAO,GAAAc,OAAA/B,OAAAoI,EAAA,EAAApI,CAAME,KAAK2D,MAAM5C,SAAjB,CAA0B8B,2CAIvCA,GACT2D,QAAQC,IAAI5D,GACZ7C,KAAK8D,SAAS,CAAC/C,QAASf,KAAK2D,MAAM5C,QAAQkC,OAAO,SAAAC,GAAC,OAAIA,EAAEC,UAAYN,EAAOM,6CAI5E,OACI/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAC6H,EAAD,MACA/H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAC8H,EAAD,CAAWrH,QAASf,KAAK2D,MAAM5C,WAEnCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAC+H,EAAD,CACIxE,QAAS7D,KAAK2D,MAAME,QACpBqD,aAAclH,KAAKkH,aAAaxC,KAAK1E,MACrCgE,aAAchE,KAAKgE,aAAaU,KAAK1E,MACrCe,QAASf,KAAK2D,MAAM5C,oBA1C9BI,aCKEmH,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAASC,MACvB,kECXNC,IAASC,OAAOvI,EAAAC,EAAAC,cAACsI,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhF,KAAK,SAAAiF,GACjCA,EAAaC","file":"static/js/main.cd682ea9.chunk.js","sourcesContent":["export const Constants = {\n    GEO_API_KEY: 'AIzaSyC60fyHb2IlmWqNEvC7FC43f71gfV5TgI0'\n};\n","import React, {Component} from 'react'\nimport './google.map.scss'\nimport GoogleMapReact from 'google-map-react';\nimport {Constants} from \"../../constants/constants\";\n\n// const Marker = <div className=\"SuperAwesomePin\">AA</div>;\n\n\nclass GoogleMap extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div className='map'>\n                <GoogleMapReact\n                    bootstrapURLKeys={{key: Constants.GEO_API_KEY}}\n                    defaultCenter={{\n                        lat: 51.40,\n                        lng: 10.45\n                    }}\n                    defaultZoom={5}>\n                    {\n                        this.props.markers.map((mark, index) =>\n                            <div lat={mark.lat} lng={mark.lng} className='marker' key={index}>{''}</div>\n                        )\n                    }\n                </GoogleMapReact>\n            </div>\n        )\n    }\n}\n\nexport default GoogleMap\n","import React, {Component} from 'react'\nimport './header.scss'\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className='header pl-5 pr-5'>\n                <div className=\"content\">\n                    <img className=\"logo\" alt=\"Medwing\"\n                         src=\"https://assets.medwing.com/assets/logotype-black-f323fb2c273e4cae19803ee65557ef1032da660c938afeb9a4a116ddb1dc23d0.svg\"/>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;\n","import axios from 'axios';\n\nclass HttpService {\n    constructor() {\n        this.baseUrl = \"/api\";\n    }\n\n    getData(url) {\n        return axios.get(`${url}`);\n    }\n\n    updateData(url, data) {\n        return axios.put(`${url}`, data);\n    }\n\n    deleteData(url) {\n        return axios.delete(`${url}`);\n    }\n\n    postData(url, data) {\n        return axios.post(`${this.baseUrl}${url}`, data);\n    }\n}\n\nexport default (new HttpService());\n","import HttpService from './http.serivce'\n\nclass MarkerService {\n    constructor() {\n        this.isLocal = true;\n        this.basePath = '/api/markers';\n    }\n\n    getMarkers() {\n        if (this.isLocal) {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    resolve(this.getFromLocal());\n                }, 2000)\n            })\n        }\n        return HttpService.getData(this.basePath);\n    }\n\n    saveMarker(marker) {\n        if (this.isLocal) {\n            const markers = this.getFromLocal();\n            markers.push(marker);\n            this.setInLocal(markers);\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    resolve(marker);\n                }, 1500);\n            })\n        }\n        return HttpService.postData(this.basePath, marker);\n    }\n\n    editMarker() {\n\n    }\n\n    deleteMarker(marker) {\n        if (this.isLocal) {\n            const markers = this.getFromLocal();\n            this.setInLocal(markers.filter(t => t.address !== marker.address));\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    resolve(marker);\n                }, 200);\n            })\n        }\n        return HttpService.postData(this.basePath, marker);\n    }\n\n    getFromLocal() {\n        if (!localStorage.getItem('markers')) {\n            return [];\n        }\n        return JSON.parse(localStorage.getItem('markers'));\n    }\n\n    setInLocal(markers) {\n        localStorage.setItem('markers', JSON.stringify(markers));\n    }\n}\n\nexport default (new MarkerService())\n","import React, {Component} from 'react';\nimport './marker.scss';\nimport Button from \"reactstrap/es/Button\";\nimport Card from \"reactstrap/es/Card\";\nimport CardHeader from \"reactstrap/es/CardHeader\";\nimport CardBody from \"reactstrap/es/CardBody\";\nimport InputGroup from \"reactstrap/es/InputGroup\";\nimport InputGroupAddon from \"reactstrap/es/InputGroupAddon\";\nimport Input from \"reactstrap/es/Input\";\nimport Spinner from \"reactstrap/es/Spinner\";\nimport MarkerService from \"../../services/marker.service\";\n\nclass Marker extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEdit: false,\n            loading: false\n        }\n    }\n\n    addressChange() {\n\n    }\n\n    save() {\n        this.setState({isEdit: false});\n    }\n\n    enableEdit() {\n        this.setState({isEdit: true});\n    }\n\n    deleteMarker() {\n        this.setState({loading: true});\n        MarkerService.deleteMarker(this.props.marker).then(data => {\n            this.props.deleteMarker(this.props.marker);\n            this.setState({loading: false});\n        }, err => {\n            this.setState({loading: false});\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"col-12 col-sm-6 mb-4\">\n                <Card className='position-relative'>\n                    {\n                        this.state.loading ?\n                            <div className='overlay-spinner'><Spinner/></div>\n                            : ''\n                    }\n                    <CardHeader>\n                        {\n                            this.state.isEdit ?\n                                <InputGroup>\n                                    <Input onChange={this.addressChange.bind(this)}/>\n                                    <InputGroupAddon addonType=\"append\">\n                                        <Button onClick={this.save.bind(this)}>Save</Button>\n                                    </InputGroupAddon>\n                                </InputGroup> :\n                                this.props.marker.address\n                        }\n\n                    </CardHeader>\n                    <CardBody className='cord-body'>\n                        <label>Latitude: </label> <label>{this.props.marker.lat}</label>\n                        <br/>\n                        <label>Longitude: </label> <label>{this.props.marker.lng}</label>\n\n                        <div className='mt-4'>\n                            <Button disabled={this.state.isEdit} className='' onClick={this.enableEdit.bind(this)}\n                                    outline color=\"secondary\"\n                                    size=\"sm\">EDIT</Button>\n                            <Button disabled={this.state.isEdit} onClick={this.deleteMarker.bind(this)} className='ml-3'\n                                    outline color=\"secondary\"\n                                    size=\"sm\">DELETE</Button>\n                        </div>\n                    </CardBody>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport default Marker\n","import HttpService from './http.serivce';\nimport {Constants} from \"../constants/constants\";\n\nclass GeocodeService {\n    constructor() {\n        this.geoApi = `https://maps.googleapis.com/maps/api/geocode/json?key=${Constants.GEO_API_KEY}`;\n    }\n\n    getGeocode(address) {\n        const url = `${this.geoApi}&address=${address}`;\n        return HttpService.getData(url).then(data => {\n            return data.data.results.map(t => {\n                return {\n                    lat: t.geometry.location.lat,\n                    lng: t.geometry.location.lng,\n                    address: t.formatted_address,\n                    partialMatch: t.partial_match || false\n                }\n            });\n        }).catch(e => {\n            throw e\n        });\n    }\n}\n\nexport default (new GeocodeService());\n","import React, {Component} from 'react'\nimport './marker-container.scss'\nimport InputGroupAddon from \"reactstrap/es/InputGroupAddon\";\nimport InputGroup from \"reactstrap/es/InputGroup\";\nimport Button from \"reactstrap/es/Button\";\nimport Input from \"reactstrap/es/Input\";\nimport Marker from \"../marker/marker\";\nimport GeocodeService from '../../services/geocode.service'\nimport Fade from \"reactstrap/es/Fade\";\nimport Alert from \"reactstrap/es/Alert\";\nimport MerkerService from '../../services/marker.service';\nimport Spinner from \"reactstrap/es/Spinner\";\n\nclass MarkerContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            address: '',\n            searching: false,\n            results: [],\n            error: '',\n            dropdownOpen: true\n        }\n    }\n\n    findAddress(e) {\n        e.preventDefault();\n        this.setState({searching: true, error: ''});\n        GeocodeService.getGeocode(this.state.address).then(resp => {\n                console.log(resp);\n\n                switch (resp.length) {\n                    case 0:\n                        this.setState({error: 'No results found', searching: false});\n                        break;\n                    case 1:\n                        this.addToMarkerList(resp[0]);\n                        break;\n                    default:\n                        this.setState({results: resp, searching: false});\n                }\n            },\n            error => {\n                this.setState({error: 'Something went wrong.', searching: false});\n            });\n    }\n\n    addressChange(e) {\n        this.setState({address: e.target.value, error: ''})\n    }\n\n    selectAddress(address) {\n        this.addToMarkerList(address);\n    }\n\n    addToMarkerList(marker) {\n        this.setState({error: ''});\n        const found = this.props.markers.find(mark => marker.address === mark.address);\n        if (found) {\n            this.setState({error: 'This address already exists.', searching: false});\n        } else {\n            MerkerService.saveMarker(marker).then(data => {\n                this.props.addNewMarker(marker);\n                this.setState({results: [], address: '', searching: false});\n            }, err => {\n                this.setState({error: 'Failed to save address, please try again.'});\n            });\n\n        }\n    }\n\n    toggle() {\n\n    }\n\n    render() {\n        return (\n            <div className='marker-container'>\n                <div className='input-container'>\n                    <form onSubmit={this.findAddress.bind(this)}>\n                        <InputGroup>\n\n                            <Input onChange={this.addressChange.bind(this)}\n                                   placeholder=\"Enter address\"\n                                   value={this.state.address}\n                                   onClick={this.toggle} data-toggle=\"dropdown\"/>\n\n                            <InputGroupAddon addonType=\"append\">\n                                <Button\n                                        disabled={this.state.searching || !this.state.address}\n                                        color='primary'>\n                                    {this.state.searching ? 'Searching...' : 'Add Address'}\n                                </Button>\n                            </InputGroupAddon>\n\n                        </InputGroup>\n                    </form>\n\n                    {\n                        this.state.results.length > 1 ?\n                            <div className='address-options p-2'>\n                                <span className='mt-2'>Multiple addresses found, choose your option</span>\n                                <ul>\n                                    {\n                                        this.state.results.map(add =>\n                                            <li className='p-2'\n                                                onClick={this.selectAddress.bind(this, add)}>{add.address}</li>\n                                        )\n                                    }\n                                </ul>\n                            </div>\n                            : ''\n                    }\n\n\n                    <Fade in={!!this.state.error} tag=\"label\" className=\"m-1\">\n                        {this.state.error}\n                    </Fade>\n                </div>\n                <h2 className='pt-4'>YOUR MARKERS</h2>\n                <hr/>\n                <div className='spinner'>\n                    {this.props.loading ? <Spinner className='mt-5'/> : ''}\n                </div>\n                <div className='pt-2 markers row'>\n                    {\n                        this.props.markers.map((marker, index) =>\n                            <Marker {...this.props} key={index} marker={marker}/>\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MarkerContainer;\n","import React, {Component} from 'react';\nimport './App.css';\nimport GoogleMap from \"./components/map/google.map\";\nimport Header from \"./components/header/header\";\nimport MarkerContainer from \"./components/marker-container/marker-container\";\nimport MarkerService from './services/marker.service'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markers: [],\n            loading: true\n        }\n    }\n\n    componentDidMount() {\n        MarkerService.getMarkers().then(data => {\n            console.log('promise data', data);\n            this.setState({markers: data, loading: false});\n        }, err => {\n            this.setState({loading: false});\n        })\n    }\n\n    addNewMarker(marker) {\n        console.log(marker);\n        this.setState({markers: [...this.state.markers, marker]});\n    }\n\n\n    deleteMarker(marker) {\n        console.log(marker);\n        this.setState({markers: this.state.markers.filter(t => t.address !== marker.address)});\n    }\n\n    render() {\n        return (\n            <div className=\"\">\n                <Header/>\n                <div className=\"content row p-5\">\n                    <div className='col-12 col-md-6 mb-4'>\n                        <GoogleMap markers={this.state.markers}/>\n                    </div>\n                    <div className='col-12 col-md-6'>\n                        <MarkerContainer\n                            loading={this.state.loading}\n                            addNewMarker={this.addNewMarker.bind(this)}\n                            deleteMarker={this.deleteMarker.bind(this)}\n                            markers={this.state.markers}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}